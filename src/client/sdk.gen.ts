// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client/index.js';
import type { GetCurrentUserProfileData, GetCurrentUserProfileResponses, GetPublicUserProfilesData, GetPublicUserProfilesResponses, GetPermissionsData, GetPermissionsResponses, GetExchangeRateData, GetExchangeRateResponses, GetDepositAddressData, GetDepositAddressResponses, GetBalancesData, GetBalancesResponses, GetSpendableBalancesData, GetSpendableBalancesResponses, PayData, PayResponses, GetPaymentDetailsData, GetPaymentDetailsResponses } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Connect {
    /**
     * Get a current user profile
     */
    public static getCurrentUserProfile<ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserProfileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCurrentUserProfileResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'oauth-publickey',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-signature',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-nonce',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-timestamp',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-privatekey',
                    type: 'apiKey'
                },
                {
                    name: 'app-id',
                    type: 'apiKey'
                },
                {
                    name: 'app-secret',
                    type: 'apiKey'
                }
            ],
            url: '/v3/connect/profile/currentUserProfile',
            ...options
        });
    }
    
    /**
     * Get user profiles
     */
    public static getPublicUserProfiles<ThrowOnError extends boolean = false>(options: Options<GetPublicUserProfilesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPublicUserProfilesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'app-id',
                    type: 'apiKey'
                },
                {
                    name: 'app-secret',
                    type: 'apiKey'
                }
            ],
            url: '/v3/connect/profile/publicUserProfiles',
            ...options
        });
    }
    
    /**
     * Get users permissions
     */
    public static getPermissions<ThrowOnError extends boolean = false>(options?: Options<GetPermissionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPermissionsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'oauth-publickey',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-signature',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-nonce',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-timestamp',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-privatekey',
                    type: 'apiKey'
                },
                {
                    name: 'app-id',
                    type: 'apiKey'
                },
                {
                    name: 'app-secret',
                    type: 'apiKey'
                }
            ],
            url: '/v3/connect/profile/permissions',
            ...options
        });
    }
    
    /**
     * Retrieve the BSV exchange rate in the specified currency.
     */
    public static getExchangeRate<ThrowOnError extends boolean = false>(options: Options<GetExchangeRateData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetExchangeRateResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'app-id',
                    type: 'apiKey'
                },
                {
                    name: 'app-secret',
                    type: 'apiKey'
                }
            ],
            url: '/v3/connect/exchangeRate/{currencyCode}',
            ...options
        });
    }
    
    /**
     * Get a legacy deposit address
     */
    public static getDepositAddress<ThrowOnError extends boolean = false>(options?: Options<GetDepositAddressData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDepositAddressResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'oauth-publickey',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-signature',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-nonce',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-timestamp',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-privatekey',
                    type: 'apiKey'
                },
                {
                    name: 'app-id',
                    type: 'apiKey'
                },
                {
                    name: 'app-secret',
                    type: 'apiKey'
                }
            ],
            url: '/v3/connect/wallet/address',
            ...options
        });
    }
    
    /**
     * Retrieve wallet balances.
     */
    public static getBalances<ThrowOnError extends boolean = false>(options?: Options<GetBalancesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetBalancesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'oauth-publickey',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-signature',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-nonce',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-timestamp',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-privatekey',
                    type: 'apiKey'
                },
                {
                    name: 'app-id',
                    type: 'apiKey'
                },
                {
                    name: 'app-secret',
                    type: 'apiKey'
                }
            ],
            url: '/v3/connect/wallet/balances',
            ...options
        });
    }
    
    /**
     * Retrieve wallets spendable balances.
     */
    public static getSpendableBalances<ThrowOnError extends boolean = false>(options?: Options<GetSpendableBalancesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSpendableBalancesResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'oauth-publickey',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-signature',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-nonce',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-timestamp',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-privatekey',
                    type: 'apiKey'
                },
                {
                    name: 'app-id',
                    type: 'apiKey'
                },
                {
                    name: 'app-secret',
                    type: 'apiKey'
                }
            ],
            url: '/v3/connect/wallet/spendableBalances',
            ...options
        });
    }
    
    /**
     * Make a payment
     */
    public static pay<ThrowOnError extends boolean = false>(options: Options<PayData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PayResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'oauth-publickey',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-signature',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-nonce',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-timestamp',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-privatekey',
                    type: 'apiKey'
                },
                {
                    name: 'app-id',
                    type: 'apiKey'
                },
                {
                    name: 'app-secret',
                    type: 'apiKey'
                }
            ],
            url: '/v3/connect/wallet/pay',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Retrieve details for a specific payment.
     */
    public static getPaymentDetails<ThrowOnError extends boolean = false>(options: Options<GetPaymentDetailsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPaymentDetailsResponses, unknown, ThrowOnError>({
            security: [
                {
                    name: 'oauth-publickey',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-signature',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-nonce',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-timestamp',
                    type: 'apiKey'
                },
                {
                    name: 'oauth-privatekey',
                    type: 'apiKey'
                },
                {
                    name: 'app-id',
                    type: 'apiKey'
                },
                {
                    name: 'app-secret',
                    type: 'apiKey'
                }
            ],
            url: '/v3/connect/wallet/payment',
            ...options
        });
    }
}